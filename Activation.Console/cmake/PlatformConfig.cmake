# PlatformConfig.cmake

# Helper function to detect Linux distribution
function(detect_linux_distribution out_distro)
    set(distro "Linux")
    if(ALPINE_ARM64)
        set(distro "Alpine")
    elseif(EXISTS "/etc/alpine-release")
        set(distro "Alpine")
    elseif(EXISTS "/etc/ubuntu-release" OR EXISTS "/etc/debian_version")
        set(distro "Ubuntu")
    endif()
    set(${out_distro} ${distro} PARENT_SCOPE)
endfunction()

# Helper function to get normalized architecture
function(get_normalized_arch out_arch)
    string(TOLOWER "${CMAKE_SYSTEM_PROCESSOR}" _proc_lower)
    if(_proc_lower MATCHES "^(arm64|aarch64)$")
        set(arch "arm64")
    elseif(_proc_lower STREQUAL "x86_64")
        set(arch "x86_64")
    else()
        message(FATAL_ERROR "Unsupported architecture: ${CMAKE_SYSTEM_PROCESSOR}")
    endif()
    set(${out_arch} ${arch} PARENT_SCOPE)
endfunction()

if(WIN32)
    set(SYSTEM "Windows_x86_64")
elseif(APPLE)
    get_normalized_arch(ARCH)
    set(SYSTEM "MacOS_${ARCH}")
elseif(UNIX)
    detect_linux_distribution(LINUX_DISTRO)
    get_normalized_arch(ARCH)
    
    if(LINUX_DISTRO STREQUAL "Alpine")
        if(ARCH STREQUAL "arm64")
            set(SYSTEM "Linux_alpine_aarch64")
        else()
            set(SYSTEM "Linux_alpine_${ARCH}")
        endif()
        message(STATUS "Building for Alpine Linux")
    else()
        if(ARCH STREQUAL "arm64")
            set(SYSTEM "Linux_aarch64")
        else()
            set(SYSTEM "Linux_${ARCH}")
        endif()
    endif()
endif()

# Set library directory mapping for unified Linux handling
if(UNIX AND NOT APPLE)
    detect_linux_distribution(LINUX_DISTRO)
    get_normalized_arch(ARCH)
    
    if(LINUX_DISTRO STREQUAL "Alpine")
        if(ARCH STREQUAL "arm64")
            set(LINUX_LIB_DIR "Alpine_arm64")
        else()
            set(LINUX_LIB_DIR "Alpine_${ARCH}")
        endif()
    else()
        if(ARCH STREQUAL "arm64")
            set(LINUX_LIB_DIR "Ubuntu_arm64")
        else()
            set(LINUX_LIB_DIR "Ubuntu_${ARCH}")
        endif()
    endif()
    
    # Make available globally
    set(LINUX_LIB_DIR ${LINUX_LIB_DIR} CACHE INTERNAL "Linux library directory suffix")
endif()

